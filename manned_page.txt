TAB-VIEW(1)                      User Commands                     TAB-VIEW(1)



NAME
       tab-view - regenerate the commands

SYNOPSIS
	tab-view DataverseName [-s [DatasetName]] [-v newDataverseName] [-i [DatasetName IndexName]] [-f [FunctionName, #args]]
	tab-view -h

DESCRIPTION
	-s [DatasetName]
		print commands that recreate the specified Dataset or all Datasets

	-v newDataverseName
		print commands that create a new Dataverse

	-i [DatasetName IndexName]
		print commands that recreate the specified Index or all Indexes

	-f [FunctionName, #args]
		print commands that recreate the specified Function or all Functions

	-h
		print the format in the format of regular expression

ERRORS
	Command not found!
		when an input flag is not one of the flags above

	Dataset not found!
		when the specified Dataset does not exist

	Dataverse not found!
		when the specified Dataverse does not exist (or the database is not connected)

	Function not found!
		when the specified Function does not exist

	Index not found!
		when the specified Index does not exist

	Invalid arguments!
		when the inputed command is invalid

	Invalid number of arguments!
		when there are too few or too many arguments


BUGS
	Because of the author's unfamiliarity with Java, the time complexity may not be linear by accident.
	Also the performance of the program is unknown for large data.
	It seems that Asterixdb just updated some new features, which are not yet included in this program.
	To report bugs please contact Yunfan Qiao <yunfanq2@uci.edu>

EXAMPLES
	Assume this is the original Dataverse.

	DROP DATAVERSE YunfanData IF EXISTS;
	CREATE DATAVERSE YunfanData;
	USE YunfanData;
	
	CREATE TYPE SubType AS {
		id: int,
    		a: int
	};
	
	CREATE TYPE SmallType AS {
		id: int,
    		a: SubType
	};
	
	CREATE TYPE BigType AS {
		id: int,
    		a: SubType,
    		b: SmallType,
    		c: string
	};
	
	CREATE TYPE AutoType AS {
		id: uuid
	};

	CREATE DATASET SmallSet(SmallType)
		PRIMARY KEY id;

	CREATE DATASET BigSet(BigType)
		PRIMARY KEY b.a.id;
    
	CREATE DATASET AutoSet(AutoType)
		PRIMARY KEY id AUTOGENERATED;
    
	CREATE INDEX SmallIndex ON SmallSet(a.id);

	CREATE INDEX BigIndex ON BigSet(c) TYPE NGRAM(3);

	CREATE FUNCTION SmallFunction (x) {
		abs(SmallSet) + x
	};

	CREATE FUNCTION RandomFunction (...) {
		abs(SmallFunction(args[0])) + abs(args[1].id) + AutoSet
	};

	Here are the example commands:

		java -jar ./target/tab-view-0.1-SNAPSHOT-jar-with-dependencies.jar -h
			DataverseName (-s DatasetName?)? (-v newDataverseName)? (-i (DatasetName IndexName)?)? (-f (FunctionName, #args)?)?

		java -jar ./target/tab-view-0.1-SNAPSHOT-jar-with-dependencies.jar YunfanData -s BigSet
			CREATE TYPE SubType AS {
        			id: int64,
        			a: int64
			};

			CREATE TYPE SmallType AS {
        			id: int64,
        			a: SubType
			};

			CREATE TYPE BigType AS {
        			id: int64,
        			a: SubType,
        			b: SmallType,
        			c: string
			};

			CREATE DATASET BigSet(BigType)
        			PRIMARY KEY b.a.id;

		java -jar ./target/tab-view-0.1-SNAPSHOT-jar-with-dependencies.jar YunfanData -s -v newYunfanData
			DROP DATAVERSE newYunfanData IF EXISTS;
			CREATE DATAVERSE newYunfanData;
			USE newYunfanData;

			CREATE TYPE SubType AS {
        			id: int64,
        			a: int64
			};

			CREATE TYPE BigType AS {
        			id: int64,
        			a: SubType,
        			b: SmallType,
        			c: string
			};

			CREATE TYPE AutoType AS {
        			id: uuid
			};

			CREATE TYPE SmallType AS {
        			id: int64,
        			a: SubType
			};

			CREATE DATASET AutoSet(AutoType)
        			PRIMARY KEY id AUTOGENERATED;

			CREATE DATASET BigSet(BigType)
        			PRIMARY KEY b.a.id;

			CREATE DATASET SmallSet(SmallType)
        			PRIMARY KEY id;

		
		java -jar ./target/tab-view-0.1-SNAPSHOT-jar-with-dependencies.jar YunfanData -i BigSet BigIndex
			CREATE TYPE SubType AS {
        			id: int64,
        			a: int64
			};

			CREATE TYPE SmallType AS {
        			id: int64,
        			a: SubType
			};

			CREATE TYPE BigType AS {
        			id: int64,
        			a: SubType,
        			b: SmallType,
        			c: string
			};

			CREATE DATASET BigSet(BigType)
        			PRIMARY KEY b.a.id;

			CREATE INDEX BigIndex ON BigSet(c) TYPE NGRAM(3);

		java -jar ./target/tab-view-0.1-SNAPSHOT-jar-with-dependencies.jar YunfanData -i
			CREATE TYPE SubType AS {
        			id: int64,
        			a: int64
			};

			CREATE TYPE SmallType AS {
        			id: int64,
        			a: SubType
			};

			CREATE TYPE BigType AS {
        			id: int64,
        			a: SubType,
        			b: SmallType,
        			c: string
			};

			CREATE DATASET BigSet(BigType)
        			PRIMARY KEY b.a.id;

			CREATE INDEX BigIndex ON BigSet(c) TYPE NGRAM(3);

			CREATE INDEX SmallIndex ON SmallSet(a.id) TYPE BTREE;

		java -jar ./target/tab-view-0.1-SNAPSHOT-jar-with-dependencies.jar YunfanData -f SmallFunction 1
			CREATE TYPE SubType AS {
        			id: int64,
        			a: int64
			};

			CREATE TYPE SmallType AS {
        			id: int64,
        			a: SubType
			};

			CREATE DATASET SmallSet(SmallType)
        			PRIMARY KEY id;

			CREATE OR REPLACE FUNCTION SmallFunction(x) {
			abs(SmallSet) + x
			};

		java -jar ./target/tab-view-0.1-SNAPSHOT-jar-with-dependencies.jar YunfanData -f
			CREATE TYPE AutoType AS {
		      	id: uuid
			};

			CREATE DATASET AutoSet(AutoType)
        			PRIMARY KEY id AUTOGENERATED;

			CREATE TYPE SubType AS {
        			id: int64,
        			a: int64
			};

			CREATE TYPE SmallType AS {
        			id: int64,
        			a: SubType
			};

			CREATE DATASET SmallSet(SmallType)
        			PRIMARY KEY id;

			CREATE OR REPLACE FUNCTION SmallFunction(x) {
			abs(SmallSet) + x
			};

			CREATE OR REPLACE FUNCTION RandomFunction(...) {
			abs(SmallFunction(args[0])) + abs(args[1].id) + AutoSet
			};
		
		java -jar ./target/tab-view-0.1-SNAPSHOT-jar-with-dependencies.jar YunfanData -f RandomFunction -1 -i BigSet BigIndex -s SmallSet -v newYunfanData
			DROP DATAVERSE newYunfanData IF EXISTS;
			CREATE DATAVERSE newYunfanData;
			USE newYunfanData;

			CREATE TYPE SubType AS {
			        id: int64,
			        a: int64
			};

			CREATE TYPE SmallType AS {
			        id: int64,
			        a: SubType
			};

			CREATE DATASET SmallSet(SmallType)
			        PRIMARY KEY id;

			CREATE TYPE BigType AS {
			        id: int64,
			        a: SubType,
			        b: SmallType,
			        c: string
			};

			CREATE DATASET BigSet(BigType)
			        PRIMARY KEY b.a.id;

			CREATE INDEX BigIndex ON BigSet(c) TYPE NGRAM(3);

			CREATE TYPE AutoType AS {
			        id: uuid
			};

			CREATE DATASET AutoSet(AutoType)
			        PRIMARY KEY id AUTOGENERATED;

			CREATE OR REPLACE FUNCTION SmallFunction(x) {
			abs(SmallSet) + x
			};

			CREATE OR REPLACE FUNCTION RandomFunction(...) {
			abs(SmallFunction(args[0])) + abs(args[1].id) + AutoSet
			};

	Although the recreated commands may look a bit different, they will produce the same things.




TAB-VIEW                          March 2022                       TAB-VIEW(1)